# Generated by Django 5.2.4 on 2025-08-05 13:13

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Event title/name', max_length=200)),
                ('description', models.TextField(help_text='Detailed event description')),
                ('start_datetime', models.DateTimeField(help_text='Event start date and time')),
                ('end_datetime', models.DateTimeField(help_text='Event end date and time')),
                ('location', models.CharField(help_text='Event location/venue', max_length=255)),
                ('total_cost', models.DecimalField(decimal_places=2, help_text='Total cost of the event', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('cost_per_person', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Calculated cost per participant (auto-calculated)', max_digits=10)),
                ('max_participants', models.PositiveIntegerField(default=20, help_text='Maximum number of participants')),
                ('min_participants', models.PositiveIntegerField(default=2, help_text='Minimum participants required for event to proceed')),
                ('requires_payment', models.BooleanField(default=True, help_text='Event requires payment from participants')),
                ('payment_deadline', models.DateTimeField(blank=True, help_text='Deadline for participant payments', null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft - not yet published'), ('OPEN', 'Open for registration'), ('FULL', 'Full - no more participants'), ('CONFIRMED', 'Confirmed - event will proceed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Event completed')], default='DRAFT', help_text='Current event status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(help_text='Group member who created this event', on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Group Event',
                'verbose_name_plural': 'Group Events',
                'ordering': ['-start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EventParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('custom_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Custom amount if not splitting equally', max_digits=10, null=True)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Payment pending'), ('PAID', 'Payment completed'), ('PARTIAL', 'Partial payment made'), ('REFUNDED', 'Payment refunded'), ('WAIVED', 'Payment waived')], default='PENDING', help_text='Current payment status', max_length=20)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount already paid by participant', max_digits=10)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('attendance_status', models.CharField(choices=[('CONFIRMED', 'Will attend'), ('MAYBE', 'Maybe attending'), ('DECLINED', 'Will not attend'), ('NO_RESPONSE', 'No response yet')], default='CONFIRMED', help_text="Participant's attendance confirmation", max_length=20)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chipin.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['joined_at'],
                'unique_together': {('user', 'event')},
            },
        ),
        migrations.AddField(
            model_name='event',
            name='participants',
            field=models.ManyToManyField(help_text='Users participating in this event', related_name='participating_events', through='chipin.EventParticipation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Group name visible to members', max_length=100)),
                ('description', models.TextField(help_text='Description of group purpose and activities')),
                ('is_public', models.BooleanField(default=False, help_text='Public groups can be discovered by other students')),
                ('requires_approval', models.BooleanField(default=True, help_text='New members need approval from admin/creator')),
                ('max_members', models.PositiveIntegerField(default=50, help_text='Maximum number of group members')),
                ('default_split_method', models.CharField(choices=[('EQUAL', 'Split equally among participants'), ('CUSTOM', 'Custom amounts per participant'), ('PERCENTAGE', 'Percentage-based splitting')], default='EQUAL', help_text='Default method for splitting event costs', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Active groups can create events')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(help_text='User who created this group', on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(help_text='All group members', related_name='joined_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Group',
                'verbose_name_plural': 'Student Groups',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='event',
            name='group',
            field=models.ForeignKey(help_text='Group organizing this event', on_delete=django.db.models.deletion.CASCADE, related_name='events', to='chipin.group'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(help_text='Unique student identifier', max_length=20, unique=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='Used for age verification', null=True)),
                ('trusted_adult_email', models.EmailField(help_text='Email of parent/guardian who manages balance', max_length=254)),
                ('trusted_adult_phone', models.CharField(help_text='Emergency contact number', max_length=20)),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Current account balance - managed by trusted adult', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('spending_limit', models.DecimalField(decimal_places=2, default=Decimal('50.00'), help_text='Maximum spending limit per transaction', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_verified', models.BooleanField(default=False, help_text='Account verified by trusted adult')),
                ('can_create_groups', models.BooleanField(default=True, help_text='Permission to create new groups')),
                ('can_join_events', models.BooleanField(default=True, help_text='Permission to join events')),
                ('privacy_level', models.CharField(choices=[('PUBLIC', 'Public - visible to all students'), ('FRIENDS', 'Friends only'), ('PRIVATE', 'Private - invitation only')], default='FRIENDS', help_text='Profile visibility setting', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('transaction_type', models.CharField(choices=[('DEPOSIT', 'Trusted adult deposit'), ('TRANSFER', 'User-to-user transfer'), ('EVENT_PAYMENT', 'Event participation payment'), ('REFUND', 'Event refund'), ('WITHDRAWAL', 'Account withdrawal'), ('ADJUSTMENT', 'Balance adjustment')], help_text='Type of financial transaction', max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Transaction pending'), ('COMPLETED', 'Transaction completed'), ('FAILED', 'Transaction failed'), ('CANCELLED', 'Transaction cancelled'), ('REFUNDED', 'Transaction refunded')], default='PENDING', help_text='Current transaction status', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Transaction description or notes')),
                ('reference_code', models.CharField(blank=True, help_text='External reference code', max_length=50)),
                ('requires_adult_approval', models.BooleanField(default=False, help_text='Requires trusted adult approval')),
                ('approved_by_adult', models.BooleanField(default=False, help_text='Approved by trusted adult')),
                ('adult_approval_date', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of transaction', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('event', models.ForeignKey(blank=True, help_text='Related event if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='chipin.event')),
                ('recipient', models.ForeignKey(help_text='User who received the funds', on_delete=django.db.models.deletion.CASCADE, related_name='received_transactions', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(help_text='User who sent the funds', on_delete=django.db.models.deletion.CASCADE, related_name='sent_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Financial Transaction',
                'verbose_name_plural': 'Financial Transactions',
                'ordering': ['-created_at'],
            },
        ),
    ]
